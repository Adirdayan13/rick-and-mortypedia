{"version":3,"sources":["components/MoreInfo.js","components/Characters.js","components/Locations.js","components/Episodes.js","Main.js","serviceWorker.js","index.js"],"names":["MoreInfo","props","console","log","className","onClick","close","alt","src","info","image","name","status","gender","origin","species","type","location","episode","map","eachEpisode","index","key","slice","length","Characters","handlePageChange","pageNumber","a","setState","state","currentPage","filter","fetchNextTen","fetchFiltered","itemsPerPage","totalCharacters","showCharacter","characters","next","prev","this","fetchCharacter","fetch","then","res","json","count","results","startIndex","lastIndex","charactersIds","i","push","join","origString","replaceChar","substr","changedNumber","Fragment","id","onChange","e","target","value","character","created","split","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","hideDisabled","itemClass","linkClass","React","Component","Locations","residents","fetchLocations","data","arrayFetch","resident","residentsResults","noResults","result","fetchResidents","Episodes","totalPages","episodeChosen","fetchEpisodes","pages","charactersAppeared","style","marginBottom","handleClick","air_date","Main","locations","episodes","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3566efd5.chunk.js","sourcesContent":["import React from 'react';\nimport \"./MoreInfo.css\";\n\nfunction MoreInfo(props) {\n    console.log(\"props: \", props);\n    return (\n        <div className=\"more-info\">\n            <h3 className=\"x\" onClick={props.close}>X</h3>\n            <img alt=\"character\" className=\"more-info-pic\" src={props.info.image ? props.info.image : null} />\n            <h1>{props.info.name ? props.info.name : null}</h1>\n            <h4>Status: {props.info.status ? props.info.status : null}</h4>\n            <h4>Gender: {props.info.gender ? props.info.gender : null}</h4>\n            <h4>Origin: {props.info.origin ? props.info.origin.name : null}</h4>\n            <h4>Speicies: {props.info.species ? props.info.species :null}</h4>\n            {props.info.type ? <h4>Type: {props.info.type}</h4> : null}\n            <h4>Location: {props.info.location? props.info.location.name : null}</h4>\n            <br />\n            <h6>Appeared in the following episodes:</h6>\n            <br />\n            <div className=\"episodes\">\n            {props.info.episode && props.info.episode.map((eachEpisode, index) => {\n                return (\n                    <span className=\"episode\" key={index}>{eachEpisode.slice(40, eachEpisode.length)}</span>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default MoreInfo;","import React, { useState, useEffect } from \"react\";\nimport Pagination from \"react-js-pagination\";\nimport MoreInfo from './MoreInfo'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"../App.css\";\n\nclass Characters extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPage: 1,\n            itemsPerPage: 20,\n            filter: false,\n            totalCharacters: 0,\n            showCharacter: false,\n            characters: \"\",\n            next: false,\n            prev: false\n        };\n        let startIndex;\n        let lastIndex;\n    }\n    async componentDidMount() {\n        await this.fetchCharacter()\n    }\n\n    fetchCharacter() {\n        const res = fetch(\"https://rickandmortyapi.com/api/character/\")\n            .then(res => res.json())\n            .then(async res => {\n                await this.setState({\n                    ...this.state,\n                    totalCharacters: res.info.count,\n                    characters: res.results\n                })\n            })\n    }\n\n    handlePageChange = async (pageNumber) => {\n        await this.setState({\n            ...this.state,\n            currentPage: pageNumber\n        });\n        if (!this.state.filter) {\n            await this.fetchNextTen();\n        } else {\n            this.fetchFiltered(pageNumber);\n        }\n    }\n    fetchNextTen() {\n        this.startIndex = this.state.itemsPerPage * (this.state.currentPage - 1);\n        this.lastIndex = this.state.itemsPerPage * this.state.currentPage;\n        this.lastIndex =\n            this.lastIndex > this.state.totalCharacters\n                ? this.state.totalCharacters\n                : this.lastIndex;\n        const charactersIds = [];\n        for (let i = this.startIndex + 1; i <= this.lastIndex; i++) {\n            charactersIds.push(i);\n        }\n        console.log(\"charactersIds: \", charactersIds);\n        \n        fetch(`https://rickandmortyapi.com/api/character/${charactersIds.join(\",\")}`)\n            .then(res => res.json())\n            .then(res => {\n                this.setState({\n                    ...this.state,\n                    characters: res\n                })\n            })\n\n    };\n\n    replaceChar(origString, replaceChar, index) {\n        let firstPart = origString.substr(0, index);\n        let lastPart = origString.substr(index + 1);\n\n        let newString = firstPart + replaceChar + lastPart;\n        return newString;\n    }\n\n    fetchFiltered(pageNumber) {\n        if (!pageNumber) {\n            fetch(`https://rickandmortyapi.com/api/character/?species=${this.state.filter}`)\n                .then(res => res.json())\n                .then(res => {\n                    this.setState({\n                        ...this.state,\n                        characters: res.results,\n                        totalCharacters: res.info.count,\n                        next: res.info.next,\n                        prev: res.info.prev ? res.info.prev : false\n                    })\n                })\n        }\n        if (pageNumber && this.state.next || pageNumber && this.state.prev) {\n\n            let changedNumber = this.replaceChar(this.state.next || this.state.prev, pageNumber, 48);\n            fetch(changedNumber)\n                .then(res => res.json())\n                .then(res => {\n                    this.setState({\n                        ...this.state,\n                        characters: res.results,\n                        totalCharacters: res.info.count,\n                        next: res.info.next,\n                        prev: res.info.prev ? res.info.prev : false\n                    })\n                })\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n            <h3 className=\"x\" onClick={this.props.close}>X</h3>\n            <br />\n                <div className=\"App\">\n                    {this.state.showCharacter && (\n                        <React.Fragment>\n                            <MoreInfo info={this.state.showCharacter} close={() => this.setState({ ...this.state, showCharacter: false })} />\n                        </React.Fragment>\n                    )}\n                </div>\n                {!this.state.showCharacter && (\n                    <div className=\"App\">\n                        <h6>Filter characters:</h6>\n                        <select id=\"species\" onChange={async e => { return await this.setState({ ...this.state, filter: e.target.value, currentPage: 1 }), await this.fetchFiltered() }}>\n                            <option value=\"Human\">Human</option>\n                            <option value=\"Humanoid\">Humanoid</option>\n                            <option value=\"Alien\">Alien</option>\n                            <option value=\"Disease\">Disease</option>\n                            <option value=\"Robot\">Robot</option>\n                            <option value=\"Parasite\">Parasite</option>\n                        </select>\n                        <div className=\"cards\">\n                            {this.state.characters && (\n                                <React.Fragment>\n                                    {this.state.characters.length > 0 && (\n                                        <React.Fragment>\n                                            {this.state.characters.map((character, index) => {\n                                                const { id, name, species, status, image, created } = character;\n                                                return (\n                                                    <div className=\"card\" key={id}>\n                                                        <img className=\"card-img-top\" src={image} alt=\"character\" />\n                                                        <ul className=\"list-group list-group-flush\">\n                                                            <h4><li className=\"list-group-item\"><strong>{name}</strong></li></h4>\n                                                            <li className=\"list-group-item\">{species}, {status}</li>\n                                                            <li className=\"list-group-item\">{created.slice(0, 10)}</li>\n                                                        </ul>\n                                                        <p onClick={() => this.setState({ ...this.state, showCharacter: this.state.characters[index] })} className=\"btn btn-primary\">See {name.split(' ')[0]}</p>\n                                                    </div>\n                                                );\n                                            })}\n                                        </React.Fragment>\n                                    )}\n                                </React.Fragment>\n                            )}\n                        </div>\n                        <Pagination\n                            activePage={this.state.currentPage}\n                            itemsCountPerPage={this.state.itemsPerPage}\n                            totalItemsCount={this.state.totalCharacters ? this.state.totalCharacters : 10}\n                            pageRangeDisplayed={10}\n                            onChange={this.handlePageChange}\n                            hideDisabled={true}\n                            itemClass={\"page-item\"}\n                            linkClass={\"page-link\"}\n                        />\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\nexport default Characters;\n\n","import React from 'react';\nimport MoreInfo from './MoreInfo';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Locations.css'\n\nclass Locations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { residents: false };\n    }\n    componentDidMount() {\n        this.fetchLocations();\n    }\n\n    fetchLocations() {\n        return fetch(\"https://rickandmortyapi.com/api/location\")\n            .then(res => res.json())\n            .then(data => this.setState({ data }))\n    }\n\n    async fetchResidents(index) {\n        const arrayFetch = this.state.data.results[index].residents.map(resident => { return resident.slice(42) });\n        if (this.state.data.results[index].residents.length !== 0) {\n            return (\n\n                await fetch(`https://rickandmortyapi.com/api/character/${arrayFetch}`)\n                    .then(res => res.json())\n                    .then(residentsResults => (console.log(\"residentsResults: \", residentsResults), this.setState({ residentsResults, location: index, noResults: false })))\n            )\n        } else {\n            return (\n                this.setState({ residentsResults: false, noResults: true })\n            )\n        }\n    }\n\n    render() {\n        console.log(\"this.state: \", this.state)\n        return (\n            <div className=\"locations\">\n                {!this.state.residentsResults && (\n                    <React.Fragment>\n                        <h2>Choose planet to see all the residents</h2>\n                        <h3 className=\"x\" onClick={this.props.close}>X</h3>\n                    </React.Fragment>\n                )}\n                {this.state.noResults && (\n                    <div className=\"fade-out\">\n                        <h3>This planet have no residents</h3>\n                    </div>\n                )}\n                <div className=\"all-locations\">\n                    {!this.state.showCharacter && this.state.data && !this.state.residentsResults ? this.state.data.results.map((result, index) => {\n                        return (\n\n                                <div className=\"location\" onClick={() => this.fetchResidents(index)} key={index}>\n                                {result.name}\n                                </div>\n                        )\n                    }) : null}\n                </div>\n                {!this.state.showCharacter && this.state.residentsResults && (\n                    <React.Fragment>\n                        <h2>{this.state.data.results[this.state.location].name} planet have {this.state.residentsResults.length ? this.state.residentsResults.length : 1} {this.state.residentsResults.length ? \"residents:\" : \"resident:\"}</h2>\n                        <h3 className=\"x\" onClick={() => this.setState({ residentsResults: false })}>X</h3>\n                        <div className=\"cards\">\n                            {this.state.residentsResults.length > 1 ? this.state.residentsResults.map((resident, index) => {\n                                return (\n                                    <div className=\"card\" key={index}>\n                                        <img src={resident.image} alt=\"resident\" className=\"card-img-top\" />\n                                        <ul className=\"list-group list-group-flush\">\n                                            <h4><li className=\"list-group-item\">\n                                                <strong>{resident.name}</strong>\n                                            </li></h4>\n                                            <li className=\"list-group-item\">{resident.species}, {resident.status}</li>\n                                            <li className=\"list-group-item\">{resident.created.slice(0, 10)}</li>\n                                            <p onClick={() => this.setState({ ...this.state, showCharacter: this.state.residentsResults[index] })} className=\"btn btn-primary\">See {resident.name.split(' ')[0]}</p>\n                                        </ul>\n                                    </div>\n                                )\n                            })\n                                :\n                                <div className=\"card\">\n                                    <img src={this.state.residentsResults.image} className=\"card-img-top\" alt=\"residnt\" />\n                                    <ul className=\"list-group list-group-flush\">\n                                        <h4><li className=\"list-group-item\"><strong>{this.state.residentsResults.name}</strong></li></h4>\n                                        <li className=\"list-group-item\">{this.state.residentsResults.species}, {this.state.residentsResults.status}</li>\n                                        <li className=\"list-group-item\">{this.state.residentsResults.created.slice(0, 10)}</li>\n                                        <p onClick={() => this.setState({ ...this.state, showCharacter: this.state.residentsResults })} className=\"btn btn-primary\">See {this.state.residentsResults.name.split(' ')[0]}</p>\n\n                                    </ul>\n                                </div>\n                            }\n                        </div>\n                    </React.Fragment>\n                )}\n                {this.state.showCharacter && (\n                    <MoreInfo info={this.state.showCharacter} close={() => this.setState({ showCharacter: false })} />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default Locations;","import React from 'react';\nimport './Episodes.css'\nimport MoreInfo from './MoreInfo';\nimport Pagination from \"react-js-pagination\";\n\nclass Episodes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { currentPage: 1, totalPages: 1, totalCharacters: 1, episodeChosen: false };\n    }\n\n    componentDidMount() {\n        this.fetchEpisodes();\n    }\n\n    fetchEpisodes() {\n        fetch(\"https://rickandmortyapi.com/api/episode\")\n            .then(res => res.json())\n            .then(data => this.setState({ data, totalPages: data.info.pages, totalCharacters: data.info.count, next: data.info.next, characters: data.results }))\n    }\n    replaceChar(origString, replaceChar, index) {\n        let firstPart = origString.substr(0, index);\n        let lastPart = origString.substr(index + 1);\n\n        let newString = firstPart + lastPart;\n        return newString;\n    }\n    handlePageChange = async (pageNumber) => {\n        if (pageNumber && this.state.next || pageNumber && this.state.prev) {\n            let changedNumber = this.replaceChar(this.state.next || this.state.prev, pageNumber, 48);\n            console.log(\"changedNumber: \", changedNumber);\n\n            fetch(changedNumber)\n                .then(res => res.json())\n                .then(data => {\n                    this.setState({\n                        ...this.state,\n                        data,\n                        totalCharacters: data.info.count,\n                        next: data.info.next,\n                        prev: data.info.prev ? data.info.prev : false\n                    })\n                })\n        }\n        await this.setState({\n            ...this.state,\n            currentPage: pageNumber\n        });\n    }\n\n    async handleClick(index) {\n        await this.setState({ episodeChosen: index })\n        const arrayFetch = this.state.data.results[index].characters.map(character => { return character.slice(42) });\n        console.log(\"arrayFetch: \", arrayFetch)\n        return await fetch(`https://rickandmortyapi.com/api/character/${arrayFetch}`)\n            .then(res => res.json())\n            .then(data => this.setState({ charactersAppeared: data }))\n    }\n    render() {\n        console.log(this.state);\n\n        return (\n            <div className=\"episodes-div\">\n                {this.state.data && this.state.episodeChosen === false && (\n                    <React.Fragment>\n                        <h1 style={{ marginBottom: \"3%\" }}>There is {this.state.data.info.count} episodes</h1>\n                        <h3 className=\"x\" onClick={() => this.props.close()}>X</h3>\n                        {this.state.data.results.map((episode, index) => {\n                            return (\n                                <div className=\"episode-div\" onClick={() => this.handleClick(index)} key={index}>\n                                    <p>{episode.episode}</p>\n                                    <p>{episode.name}</p>\n                                    <p>{episode.air_date}</p>\n                                </div>\n                            )\n                        })}\n                    </React.Fragment>\n                )}\n                {this.state.episodeChosen !== false && this.state.charactersAppeared && !this.state.showCharacter && (\n                    <div className=\"characters-appeared\">\n                        <h2>Characters that appeared in {this.state.data.results[this.state.episodeChosen].name}</h2>\n                        <h3 className=\"x\" onClick={() => this.setState({ episodeChosen: false })}>X</h3>\n                        <div className=\"cards cards-episodes\">\n                            {this.state.charactersAppeared.map((character, index) => {\n                                return (\n                                    <div className=\"card\" key={index}>\n                                        <img className=\"card-img-top\" src={character.image} alt=\"character\" />\n                                        <ul className=\"list-group list-group-flush\">\n                                            <h4><li className=\"list-group-item\"><strong>{character.name}</strong></li></h4>\n                                            <li className=\"list-group-item\">{character.species}, {character.status}</li>\n                                            <li className=\"list-group-item\">{character.created.slice(0, 10)}</li>\n                                        </ul>\n                                        <p onClick={() => (console.log(index), this.setState({ ...this.state, showCharacter: this.state.charactersAppeared[index] }))} className=\"btn btn-primary\">See {character.name.split(' ')[0]}</p>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                )}\n                {this.state.showCharacter && (\n                    <MoreInfo info={this.state.showCharacter} close={() => this.setState({ showCharacter: false })} />\n                )}\n                {this.state.episodeChosen === false && (\n                    <Pagination\n                        className=\"paginate\"\n                        activePage={this.state.currentPage}\n                        itemsCountPerPage={20}\n                        totalItemsCount={this.state.totalCharacters}\n                        pageRangeDisplayed={5}\n                        onChange={this.handlePageChange}\n                        hideDisabled={true}\n                        itemClass={\"page-item\"}\n                        linkClass={\"page-link\"}\n                    />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default Episodes;","import React, { useState, useEffect } from \"react\";\nimport Characters from './components/Characters'\nimport Locations from './components/Locations'\nimport Episodes from './components/Episodes'\nimport './Main.css'\nimport \"./App.css\";\n\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { characters: false, locations: false, episodes: false }\n    }\n    render() {\n        return (\n            <React.Fragment>\n            <div className=\"intro\">\n            <img\n            className=\"logo\"\n            alt=\"rick and morty\"\n            src=\"./pictures/rickandmorty.png\"\n            />\n            <h1>Rick and Mortypedia</h1>\n            </div>\n                {!this.state.characters && !this.state.locations && !this.state.episodes && (\n                    <div className=\"App\">\n                        <div className=\"wrapper-main\">\n                            <div className=\"card\">\n                                <img className=\"card-img-top\" src={\"https://rickandmortyapi.com/api/character/avatar/1.jpeg\"} alt=\"character\" />\n                                <p onClick={() => this.setState({ characters: !this.state.characters })} className=\"btn btn-primary\">Explore by characters</p>\n                            </div>\n                            <div className=\"card\">\n                                <img className=\"card-img-top\" src='./pictures/world.png' alt=\"world\" />\n                                <p onClick={() => this.setState({ locations: !this.state.locations })} className=\"btn btn-primary\">Explore by Locations</p>\n                            </div>\n                            <div className=\"card\">\n                                <img className=\"card-img-top episodes-img\" src='./pictures/episodes.png' alt=\"episode\" />\n                                <p onClick={() => this.setState({ episodes: !this.state.episodes })} className=\"btn btn-primary\">Explore by episodes</p>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n\n                {this.state.characters ? <Characters close={() => this.setState({ characters: false })} /> : null}\n                {this.state.locations ? <Locations close={() => this.setState({ locations: false })} /> : null}\n                {this.state.episodes ? <Episodes close={() => this.setState({ episodes: false })} /> : null}\n\n\n            </React.Fragment>\n        )\n    }\n}\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\"\nimport Main from \"./Main\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}